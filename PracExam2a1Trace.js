/*
 * File: PracExam2a1Trace.js
 * -------------------------
 * Automatically generated by pycodetrace.
 */

"use strict";

function PracExam2a1Trace() {
    let ct = new PythonCodeTrace("PracExam2a1Trace");
    ct.setMaxStackDepth(4);
    ct.setFrameHeight(500);
    ct.keepLastFrame(true);
    ct.install();
    ct.defineFunction("main", new PracExam2a1_main());
    ct.defineFunction("enigma", new PracExam2a1_enigma());
    ct.defineFunction("mystery", new PracExam2a1_mystery());
    ct.defineFunction("puzzle", new PracExam2a1_puzzle());
    run();

    function run() {
        ct.push(0);
        ct.push(0);
        ct.call("main");
    }

}

class PracExam2a1_mystery extends CTFunction {

    constructor() {
        super(PracExam2a1_mystery.HTML);
    }

    createFrame(ct) {
        let cf = new CTStackFrame(ct, this);
        cf.addVariable("x", 140);
        cf.layoutVariables();
        return cf;
    }

    step(ct) {
        let cf = ct.getCurrentFrame();
        switch (cf._pc) {
          case "#0":
            let args = { };
            args.posonlyargs = [];
            args.args = ['x'];
            args.vararg = null;
            args.kwonlyargs = [];
            args.kw_defaults = [];
            args.kwarg = null;
            args.defaults = [];
            let bindings = PCTRuntime.bindParameters(ct, args);
            for (let key in bindings) {
                cf.set(key, bindings[key]);
            }
            cf._pc = "#1";
            break;
class PracExam2a1_puzzle extends CTFunction {

    constructor() {
        super(PracExam2a1_puzzle.HTML);
    }

    createFrame(ct) {
        let cf = new CTStackFrame(ct, this);
        cf.addVariable("x", 140);
        cf.addVariable("y", 140);
        cf.layoutVariables();
        return cf;
    }

    step(ct) {
        let cf = ct.getCurrentFrame();
        switch (cf._pc) {
          case "#0":
            let args = { };
            args.posonlyargs = [];
            args.args = ['x', 'y'];
            args.vararg = null;
            args.kwonlyargs = [];
            args.kw_defaults = [];
            args.kwarg = null;
            args.defaults = [5];
            let bindings = PCTRuntime.bindParameters(ct, args);
            for (let key in bindings) {
                cf.set(key, bindings[key]);
            }
            cf._pc = "#1";
            break;
          case "#1":
            ct.push(cf.get("x"));
            ct.push(cf.get("y"));
            PCTOperator.mul(ct);
            cf._result = ct.pop();
            cf._pc = "#return";
            break;
          case "#return":
            break;
          default:
            throw new Error("Bad PC value: " + cf._pc);
        }
    }

    run(ct) {
        this.step(ct);
    }
}

PracExam2a1_puzzle.HTML =
    "<span class='keyword'>def</span> puzzle(x, y=5):\n" +
    "    <span class='#1'><span class='keyword'>return</span> x * y</span>\n";

class PracExam2a1_enigma extends CTFunction {

    constructor() {
        super(PracExam2a1_enigma.HTML);
    }

    createFrame(ct) {
        let cf = new CTStackFrame(ct, this);
        cf.addVariable("y", 140);
        cf.layoutVariables();
        return cf;
    }

    step(ct) {
        let cf = ct.getCurrentFrame();
        switch (cf._pc) {
          case "#0":
            let args = { };
            args.posonlyargs = [];
            args.args = ['y'];
            args.vararg = null;
            args.kwonlyargs = [];
            args.kw_defaults = [];
            args.kwarg = null;
            args.defaults = [];
            let bindings = PCTRuntime.bindParameters(ct, args);
            for (let key in bindings) {
                cf.set(key, bindings[key]);
            }
            cf._pc = "#1";
            break;
          case "#1":
            ct.push(cf.get("y"));
            ct.push(cf.get("x"));
            PCTOperator.pow(ct);
            cf._result = ct.pop();
            cf._pc = "#return";
            break;
          case "#return":
            break;
          default:
            throw new Error("Bad PC value: " + cf._pc);
        }
    }

    run(ct) {
        this.step(ct);
    }
}

PracExam2a1_enigma.HTML =
    "<span class='keyword'>def</span> enigma(y):\n" +
    "    <span class='#1'><span class='keyword'>return</span> y ** x</span>\n";

          case "#2":
            ct.push(0);
            ct.push("x");
            ct.push(2);
            ct.push(1);
            cf._pc = "#2a";
            break;
          case "#2a":
            cf._pc = "+2a";
            ct.call("puzzle");
            break;
          case "+2a":
            ct.push(1);
            ct.push(0);
            cf._pc = "#2b";
            break;
          case "#2b":
            cf._pc = "+2b";
            ct.call("enigma");
            break;
          case "+2b":
            ct.push(3);
            ct.push(cf.get("x"));
            ct.push(2);
            ct.push(0);
            cf._pc = "#2c";
            break;
          case "#2c":
            cf._pc = "+2c";
            ct.call("puzzle");
            break;
          case "+2c":
            ct.push(1);
            ct.push(0);
            cf._pc = "#2d";
            break;
          case "#2d":
            cf._pc = "+2d";
            ct.call("enigma");
            break;
          case "+2d":
            PCTOperator.add(ct);
            cf._result = ct.pop();
            cf._pc = "#return";
            break;
          case "#return":
            break;
          default:
            throw new Error("Bad PC value: " + cf._pc);
        }
    }

    run(ct) {
        this.step(ct);
    }
}

PracExam2a1_mystery.HTML =
    "<span class='keyword'>def</span> mystery(x):\n" +
    "<span class='#1'></span>\n" +
    "    <span class='#2'><span class='keyword'>def</span> puzzle(x, y=5):</span>\n" +
    "        <span class='#3'><span class='keyword'>return</span> x * y</span>\n" +
    "<span class='#4'></span>\n" +
    "    <span class='#5'><span class='keyword'>def</span> enigma(y):</span>\n" +
    "        <span class='#6'><span class='keyword'>return</span> y ** x</span>\n" +
    "    <span class='#7'><span class='keyword'>return</span> <span class=\"#7a\">enigma(<span class=\"#7b\">puzzle(x=2)</span>)</span> + <span class=\"#7c\">enigma(<span class=\"#7d\">puzzle(3, x)</span>)</span></span>\n";

class PracExam2a1_main extends CTFunction {

    constructor() {
        super(PracExam2a1_main.HTML);
    }

    createFrame(ct) {
        let cf = new CTStackFrame(ct, this);
        cf.layoutVariables();
        return cf;
    }

    step(ct) {
        let cf = ct.getCurrentFrame();
        switch (cf._pc) {
          case "#0":
            let args = { };
            args.posonlyargs = [];
            args.args = [];
            args.vararg = null;
            args.kwonlyargs = [];
            args.kw_defaults = [];
            args.kwarg = null;
            args.defaults = [];
            let bindings = PCTRuntime.bindParameters(ct, args);
            for (let key in bindings) {
                cf.set(key, bindings[key]);
            }
            cf._pc = "#1";
            break;
          case "#1":
            ct.push(3);
            ct.push(1);
            ct.push(0);
            cf._pc = "#1a";
            break;
          case "#1a":
            cf._pc = "+1a";
            ct.call("mystery");
            break;
          case "+1a":
            ct.push(1);
            ct.push(0);
            PCTBuiltin.print(ct);
            ct.pop();
            cf._pc = "#return";
            break;
          case "#return":
            break;
          default:
            throw new Error("Bad PC value: " + cf._pc);
        }
    }

    run(ct) {
        this.step(ct);
    }
}

PracExam2a1_main.HTML =
    "<span class='#1'><span class='prompt'>&gt;&gt;&gt;</span> <span class=\"#1a\">mystery(3)</span></span>\n";

